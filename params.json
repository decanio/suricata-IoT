{
  "name": "Suricata-IoT",
  "tagline": "",
  "body": "Welcome to suricata-IoT\r\n\r\nThis repository contains extensions to the Suricata IDS/IPS/NSM to support Internet of Things (IoT) protocols, platforms and devices.\r\n\r\nExtensions found here currently include support for the following:\r\n\r\n## Datalink Protocols\r\n\r\n+ [802.15.4](http://en.wikipedia.org/wiki/IEEE_802.15.4) protocol decode\r\n+ [ZigBee](http://www.zigbee.org/) protocol decode\r\n+ [6LoWPAN](http://en.wikipedia.org/wiki/6LoWPAN) protocol decode\r\n\r\nThis version of Suricata adds decoders for the datalink protocols commonly utilized in wireless IoT networks listed above.\r\n\r\n## Application Layer Protocols\r\n\r\n+ [Constrained Application Protocol (CoAP)](http://http://coap.technology/)\r\n+ [MQTT](https://en.wikipedia.org/wiki/MQTT)\r\n\r\nIn addition support is being added for these messaging protocols commonly used in IoT networks to communicate between IoT devices and applications typically hosted in the cloud.  The implementation of these protocols is still considered a work in progress.  Therefore their implementations can be found on their own feature branches in the source code repository and haven't yet been merged into the mainline IoT branches.\r\n\r\nThe list of additional application layer protocols will likely be expanded over time as dictated by interest and demand.\r\n\r\n## Platforms:\r\n+ [Raspberry Pi](https://www.raspberrypi.org/) w/ [OpenLabs 2.4Ghz 802.15.4 radio](http://openlabs.co/OSHW/Raspberry-Pi-802.15.4-radio)\r\n+ [Itron Riva Edge](https://itronriva.com/) w/ [Riva RF 900Mhz 802.15.4 radio](https://itronriva.com/product/itron-riva-edge-rf-dev-kit/)\r\n\r\nThe code found in this code repository has been tested on these hardware platforms.  The code will probably run on similar platforms but hasn't been validated to date.\r\n\r\nInstructions for building the code for each of these platforms follows.\r\n\r\n\r\n## Setting up Suricata IoT on Raspberry Pi\r\n\r\nSurcata has been built and tested on both the Raspberry Pi 2 and Raspberry Pi 3 boards running the [Raspbian OS](https://www.raspberrypi.org/downloads/raspbian/) using the [OpenLabs Raspberry Pi 802.15.4 radio](http://openlabs.co/OSHW/Raspberry-Pi-802.15.4-radio).\r\n\r\nA picture of the Raspberry Pi with the OpenLabs radio installed can be found [here](https://goo.gl/photos/Gr1hqFieQ25DzXts9).\r\n\r\nThe Suricata setup on the Raspberry Pi with the OpenLabs 802.15.4 radio monitors raw 802.15.4 packets delivered to suricata from the network stack.  Suricata is able to decode the 802.15.4 packets containing both the ZigBee protocol or alternatively IPv6 carried over the 6LoWPAN encapsulation.\r\n\r\nZigBee carries network packets that generally do not contain IP packets.  Suricata has been extended to decode ZigBee packets and track flows between ZigBee endpoints.  Suricata's eve-log logging facility will log ZigBee flows in a manner similar to IP flows.  The ability to write rules against ZigBee traffic is being developed but has not yet been completed to the point where I'm making it available in this github repository.\r\n\r\n6LoWPAN is an adaption layer that enables carrying IPv6 traffic over an 802.15.4 radio network.  With the addition of the ability to decode 6LoWPAN traffic all of suricata's IPv6 capabilities become available over a 6LoWPAN packet network.\r\n\r\n### Building a Linux kernel for the Raspberry Pi with OpenLabs 802.15.4 radio support\r\n\r\nThe Linux kernel delivered with Raspbian does not properly support the OpenLabs 802.15.4 radio with a working network stack.  To get things to work requires cross compiling a more up-to-date kernel and installing it on the Raspberry Pi.\r\n\r\nFollow the instructions here [https://github.com/RIOT-OS/RIOT/wiki/How-to-install-6LoWPAN-Linux-Kernel-on-Raspberry-Pi](https://github.com/RIOT-OS/RIOT/wiki/How-to-install-6LoWPAN-Linux-Kernel-on-Raspberry-Pi) to build an install the required kernel.\r\n\r\n### Building and Running Suricata on the Raspberry Pi\r\n\r\nLog into your Raspberry Pi running your newly installed kernel.\r\n\r\nPrepare your Raspberry Pi's build environment using:\r\n\r\n    sudo apt-get -y install libpcre3 libpcre3-dbg libpcre3-dev \\\r\n    build-essential autoconf automake libtool libpcap-dev libnet1-dev \\\r\n    libyaml-0-2 libyaml-dev pkg-config zlib1g zlib1g-dev libcap-ng-dev libcap-ng0 \\\r\n    make libmagic-dev libjansson-dev\r\n\r\n    sudo apt-get install git-core\r\n\r\nNow download the suricata source code from this repository using:\r\n\r\n    git clone -b feature/IoT-v7 git@github.com:decanio/suricata-IoT.git\r\n\r\nNow build the code:\r\n\r\n    cd suricata-IoTgit\r\n    git clone https://github.com/OISF/libhtp\r\n    ./autogen.sh\r\n    ./configure\r\n    make\r\n\r\nAnd finally install suricata and along with a full configuration:\r\n\r\n    sudo make install-full\r\n    sudo ldconfig\r\n\r\nTo prepare the 802.15.4 radio for monitoring perform the following steps:\r\n\r\n    sudo iwpan phy phy0 set channel 0 11\r\n    sudo iwpan dev wpan0 del\r\n    sudo iwpan phy phy0 interface add mon0 type monitor\r\n    sudo ifconfig mon0 up promisc\r\n\r\nAlternatively, I've created a startup.sh script I use to avoid running these commands repeatedly containing the following:\r\n\r\n    #!/bin/sh\r\n    iwpan phy phy0 set channel 0 11\r\n    iwpan dev wpan0 del\r\n    iwpan phy phy0 interface add mon0 type monitor\r\n    ifconfig mon0 up promisc\r\n\r\nwhich can be run with:\r\n\r\n    sudo ./startup.sh\r\n\r\nNow to run suricata capturing packets from the 802.15.4 radio mon0 monitoring interface we created use:\r\n\r\n    suricata -c suricata/suricata.yaml --pcap=mon0 --runmode=single\r\n\r\n\r\n\r\n## Setting up Suricata IoT on the [Itron Riva Edge](https://itronriva.com/)\r\n\r\nThe [Itron RF board](https://itronriva.com/product/itron-riva-edge-rf-dev-kit/) is a 900Mhz 802,15.4 radio built to reach longer distances than the 2.4Ghz 802.15.4 radio used on the Raspberry Pi.  The Itron Riva's RF radio carries IPv6 traffic over 6LoWPAN.\r\n\r\nA picture of a small network of Itron Riva boards can be found [here](https://goo.gl/photos/ZjNTkjpnfr19Hyv38).\r\n\r\nAt the time of this writing the network stack supporting the Itron RF board delivers IPv6 packets to the packet sniffing interface.  Therefore suricata does not have visibility into the operation of the layers beneath IPv6.  I'm told that future version of the network stack may provide more visibility.\r\n\r\nSo therefore suricata running on the Itron Riva Edge will only support its operation at and above the IPv6 layer.  A special Itron specific switch has been added to suricata to support this mode of operation.\r\n\r\n## Setting up Suricata IoT on the Itron Riva Edge\r\n\r\nRunning suricata on the Itron Riva uses the stock kernel and runtime environment delivered with the Itron Riva Edge.  However, a native code development environment is not supported on the Itron Riva Edge.  Therefore cross compiling suricata for the Itron Riva Edge is necessary.\r\n\r\n### Building and Running Suricata for the Itron Riva Edge\r\n\r\nSet up the Itron cross development environment by following the instructions in the [Itron Riva Edge SDK Setup Guide](https://itronriva.com/article/itron-riva-edge-sdk-setup-guide/).\r\n\r\nBefore moving onto building suricata its probably worth proving that you can build and run the \"Hello Itron Riva\" example application described in the SDK Setup Guide.\r\n\r\nBuilding suricata involves downloading and cross compiling several dependent libraries and then finally cross compiling and linking suricata.  Finally all of the pieces required to install suricata are copied to the Itron Riva Edge board.\r\n\r\nCross compiling suricata for the Itron Riva was done on a machine running Ubuntu Linux 16.04 LTS.\r\n\r\nFirst create a work directory:\r\n\r\n    mkdir -p $HOME/work/itronriva\r\n\r\nGet a minimal set of dependent libraries using the Ubuntu code repository _(note that the Itron Riva runtime environment is similar enough to Ubuntu that these seem to work)_:\r\n\r\n    cd $HOME/work/itronriva\r\n    apt-get source libjansson-dev\r\n    apt-get source libpcap-dev\r\n    apt-get source libyaml-dev\r\n    apt-get source libpcre3-dev\r\n    apt-get source file\r\n\r\nCreate a build target directory on your cross development host:\r\n\r\n    mkdir -p $HOME/work/itronriva/target/usr\r\n\r\nBuild the dependent libraries:\r\n\r\nBuild libpcap:\r\n\r\n    cd $HOME/work/itronriva/libpcap-1.7.4\r\n    ./configure --host=armv7l-timesys-linux-uclibcgnueabi --with-pcap=linux --prefix=$HOME/work/itronriva/target/usr\r\n    make\r\n    make install\r\n\r\nBuild libjansson:\r\n\r\n    cd $HOME/work/itronriva/jansson-2.7\r\n    ./configure --host=armv7l-timesys-linux-uclibcgnueabi --prefix=$HOME/work/itronriva/target/usr\r\n    make\r\n    make install\r\n\r\nBuild libyaml:\r\n\r\n    cd $HOME/work/itronriva/libyaml-0.1.6\r\n    ./configure --host=armv7l-timesys-linux-uclibcgnueabi --prefix=$HOME/work/itronriva/target/usr\r\n    make\r\n    make install\r\n\r\nBuild libpcre:\r\n\r\n    cd $HOME/work/itronriva/pcre3-8.38\r\n    ./configure --host=armv7l-timesys-linux-uclibcgnueabi --prefix=$HOME/work/itronriva/target/usr\r\n    make\r\n    make install\r\n\r\nBuild libmagic:\r\n\r\n    cd $HOME/work/itronriva/file-5.25\r\n    ./configure --host=armv7l-timesys-linux-uclibcgnueabi --prefix=$HOME/work/itronriva/target/usr\r\n    make\r\n    make install\r\n\r\n_Note the build and installation of libmagic desribed here doesn't quite work.  Therefore libmagic support in this Itron Riva version of suricata has been disabled until this is sorted out._\r\n\r\n\r\nNow download the suricata source code from this repository using:\r\n\r\n    cd $HOME/work/itronriva\r\n    git clone -b feature/IoT-v7-riva git@github.com:decanio/suricata-IoT.git\r\n\r\nNow build the code:\r\n\r\n    cd suricata-IoT\r\n    git clone https://github.com/OISF/libhtp\r\n    ./autogen.sh\r\n    ./configure --host=armv7l-timesys-linux-uclibcgnueabi \\\r\n                --with-libpcre-includes=$HOME/work/itronriva/target/usr/include \\\r\n                --with-libpcre-libraries=$HOME/work/itronriva/target/usr/lib \\\r\n                --with-libyaml-includes=$HOME/work/itronriva/target/usr/include \\\r\n                --with-libyaml-libraries=$HOME/work/itronriva/target/usr/lib \\\r\n                --with-libpcap-includes=$HOME/work/itronriva/target/usr/include \\\r\n                --with-libpcap-libraries=$HOME/work/itronriva/target/usr/lib \\\r\n                --with-libmagic-includes=$HOME/work/itronriva/target/usr/include \\\r\n                --with-libmagic-libraries=$HOME/work/itronriva/target/usr/lib \\\r\n                --with-libjansson-includes=$HOME/work/itronriva/target/usr/include \\\r\n                --with-libjansson-libraries=$HOME/work/itronriva/target/usr/lib \\\r\n                --prefix=$HOME/work/itronriva/target/usr/local\r\n    make\r\n\r\nDue to configuring suricata using _--prefix=$HOME/work/itronriva/target/usr/local_ we need to fix up the suricata.yaml configuration file and the suricatasc script so that when we copy the target directory from the host to the target they will reference the directory used on the target.\r\n\r\n    cd $HOME/work/itronriva/target/usr/local/etc/suricata\r\n    echo sSSS$HOME/work/itronriva/targetSSSSSSg >script\r\n    sed -i 's/\\//\\\\\\//g' script\r\n    sed -i 's/SSS/\\//g' script\r\n    sed -f script -i suricata.yaml\r\n    sed -f script -i $HOME/work/itronriva/target/usr/local/bin/suricatasc\r\n    rm script\r\n\r\nA script to perform the entire build operation is as follows:\r\n\r\n    #!/bin/sh\r\n    mkdir -p $HOME/work/itronriva\r\n    cd $HOME/work/itronriva\r\n    apt-get source libjansson-dev\r\n    apt-get source libpcap-dev\r\n    apt-get source libyaml-dev\r\n    apt-get source libpcre3-dev\r\n    apt-get source file\r\n    mkdir -p $HOME/work/itronriva/target/usr\r\n    cd $HOME/work/itronriva/libpcap-1.7.4\r\n    ./configure --host=armv7l-timesys-linux-uclibcgnueabi --with-pcap=linux --prefix=$HOME/work/itronriva/target/usr\r\n    make\r\n    make install\r\n    cd $HOME/work/itronriva/jansson-2.7\r\n    ./configure --host=armv7l-timesys-linux-uclibcgnueabi --prefix=$HOME/work/itronriva/target/usr\r\n    make\r\n    make install\r\n    cd $HOME/work/itronriva/libyaml-0.1.6\r\n    ./configure --host=armv7l-timesys-linux-uclibcgnueabi --prefix=$HOME/work/itronriva/target/usr\r\n    make\r\n    make install\r\n    cd $HOME/work/itronriva/pcre3-8.38\r\n    ./configure --host=armv7l-timesys-linux-uclibcgnueabi --prefix=$HOME/work/itronriva/target/usr\r\n    make\r\n    make install\r\n    cd $HOME/work/itronriva/file-5.25\r\n    ./configure --host=armv7l-timesys-linux-uclibcgnueabi --prefix=$HOME/work/itronriva/target/usr\r\n    make\r\n    make install\r\n    cd $HOME/work/itronriva\r\n    git clone -b feature/IoT-v7-riva git@github.com:decanio/suricata-IoT.git\r\n    cd suricata-IoT\r\n    git clone https://github.com/OISF/libhtp\r\n    ./autogen.sh\r\n    ./configure --host=armv7l-timesys-linux-uclibcgnueabi \\\r\n                --with-libpcre-includes=$HOME/work/itronriva/target/usr/include \\\r\n                --with-libpcre-libraries=$HOME/work/itronriva/target/usr/lib \\\r\n                --with-libyaml-includes=$HOME/work/itronriva/target/usr/include \\\r\n                --with-libyaml-libraries=$HOME/work/itronriva/target/usr/lib \\\r\n                --with-libpcap-includes=$HOME/work/itronriva/target/usr/include \\\r\n                --with-libpcap-libraries=$HOME/work/itronriva/target/usr/lib \\\r\n                --with-libmagic-includes=$HOME/work/itronriva/target/usr/include \\\r\n                --with-libmagic-libraries=$HOME/work/itronriva/target/usr/lib \\\r\n                --with-libjansson-includes=$HOME/work/itronriva/target/usr/include \\\r\n                --with-libjansson-libraries=$HOME/work/itronriva/target/usr/lib \\\r\n                --prefix=$HOME/work/itronriva/target/usr/local\r\n    make\r\n    make install-full\r\n    cd $HOME/work/itronriva/target/usr/local/etc/suricata\r\n    echo sSSS$HOME/work/itronriva/targetSSSSSSg >script\r\n    sed -i 's/\\//\\\\\\//g' script\r\n    sed -i 's/SSS/\\//g' script\r\n    sed -f script -i suricata.yaml\r\n    sed -f script -i $HOME/work/itronriva/target/usr/local/bin/suricatasc\r\n    rm script\r\n\r\n## TODO\r\n\r\nExpect these instructions to be enhanced and updated over time.\r\n\r\nIf you find errors or omissions in these instructions don't hesitate to contact decanio.tom at gmail.com\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}